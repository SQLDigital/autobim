# Generated by Django 3.1 on 2020-10-04 07:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('company_name', models.CharField(max_length=80, unique=True)),
                ('street_number', models.CharField(blank=True, max_length=5)),
                ('street_name', models.CharField(blank=True, max_length=100)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('country', models.CharField(blank=True, max_length=50)),
                ('postal_code', models.CharField(blank=True, max_length=10)),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('contact_person', models.CharField(blank=True, max_length=30)),
                ('email', models.EmailField(max_length=254)),
                ('originator_code', models.CharField(default='ZZ', max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='DisciplineCategory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(max_length=200)),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.discipline')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('number', models.CharField(blank=True, max_length=10)),
                ('code', models.CharField(max_length=6)),
                ('midp_tipd_template', models.CharField(choices=[('standard_template', 'Standard Template'), ('scottish_template', 'Scottish Template'), ('balfour_beatty_template', 'Balfour Beatty Template')], default='standard_template', max_length=50, verbose_name='MIDP/TIDP Template')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('client', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='tipd_project_client', to='tidp.company')),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.discipline')),
                ('discipline_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.disciplinecategory')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectScale',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('scale', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80, unique=True)),
                ('code', models.CharField(blank=True, max_length=200)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=31)),
                ('date_added', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='TaskType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, unique=True)),
                ('code', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='TaskMember',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_person', models.CharField(max_length=200)),
                ('contact_email', models.EmailField(max_length=254)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tidp.company', verbose_name='Company/Originator')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.project')),
                ('roles', models.ManyToManyField(to='tidp.Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TaskLeader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_person', models.CharField(max_length=200)),
                ('contact_email', models.EmailField(max_length=254)),
                ('company', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tidp.company', verbose_name='Company/Originator')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.project')),
                ('roles', models.ManyToManyField(to='tidp.Role')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100, verbose_name='Task Title')),
                ('uniclass_code', models.CharField(blank=True, max_length=20)),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.discipline')),
                ('discipline_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.disciplinecategory')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tidp.role')),
                ('task_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tidp.tasktype', verbose_name='Task type/form of information')),
            ],
        ),
        migrations.CreateModel(
            name='ProjectTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(max_length=100, verbose_name='Task Title')),
                ('uniclass_code', models.CharField(blank=True, max_length=20)),
                ('volume', models.CharField(blank=True, max_length=100)),
                ('level', models.CharField(blank=True, max_length=100)),
                ('task_category', models.CharField(blank=True, max_length=100)),
                ('exchange_formats', models.CharField(blank=True, max_length=100)),
                ('eir_reference', models.CharField(blank=True, max_length=100, verbose_name='EIR Reference')),
                ('pir_reference', models.CharField(blank=True, max_length=100, verbose_name='PIR Reference')),
                ('air_reference', models.CharField(blank=True, max_length=100, verbose_name='AIR Reference')),
                ('location', models.CharField(blank=True, max_length=100)),
                ('estimated_production_duration', models.CharField(blank=True, max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('code', models.IntegerField(default=0, editable=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.company')),
                ('discipline', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.discipline')),
                ('discipline_category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.disciplinecategory')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='tidp.project')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tidp.role')),
                ('scale_or_size', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tidp.projectscale', verbose_name='Scale/Size')),
                ('task_type', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='tidp.tasktype', verbose_name='Task type/form of information')),
            ],
        ),
        migrations.AddConstraint(
            model_name='taskmember',
            constraint=models.UniqueConstraint(fields=('user', 'project'), name='unique_member'),
        ),
        migrations.AddConstraint(
            model_name='taskleader',
            constraint=models.UniqueConstraint(fields=('user', 'project'), name='unique_leader'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.UniqueConstraint(fields=('description', 'discipline', 'discipline_category', 'role', 'task_type'), name='unique_task'),
        ),
        migrations.AddConstraint(
            model_name='disciplinecategory',
            constraint=models.UniqueConstraint(fields=('discipline', 'category'), name='unique_category'),
        ),
    ]
